// Code generated by hertz generator.

package core

import (
	"common"
	"common/kitex_gen/douyin/rpc"
	"common/utils"
	"context"

	core "gateway/biz/model/douyin/core"
	"gateway/internal/db"
	"gateway/internal/jwt"
	"gateway/internal/services"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /douyin/user/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.InvalidInput(c, err)
		return
	}

	user, err := db.CreateUser(req.Username, req.Password)
	if err != nil {
		utils.Error(c, err)
		return
	}
	token, err := jwt.NewAuthorization(user.Id, req.Username)
	if err != nil {
		utils.Error(c, err)
		return
	}

	resp := &core.DouyinUserRegisterResponse{
		UserId: int64(user.Id),
		Token:  token,
	}

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.InvalidInput(c, err)
		return
	}

	user, err := db.FindUserByName(req.Username)
	if err != nil {
		utils.Error(c, err)
		return
	}
	if err := user.VerifyPassword(req.Password); err != nil {
		utils.Error(c, err)
		return
	}
	token, err := jwt.NewAuthorization(user.Id, req.Username)
	if err != nil {
		utils.Error(c, err)
		return
	}

	resp := &core.DouyinUserLoginResponse{
		UserId: int64(user.Id),
		Token:  token,
	}

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @router /douyin/user/ [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.InvalidInput(c, err)
		return
	}

	if _, err := jwt.AuthorizedUser(c); err != nil {
		utils.Error(c, err)
		return
	}
	user, err := db.FindUserById(req.UserId)
	if err != nil {
		utils.Error(c, err)
		return
	}

	counts, err := services.Counter.Fetch(ctx, &rpc.CounterGetRequest{
		Id:    []int64{user.Id},
		Kinds: []int8{common.KindUserFollowerCount, common.KindUserFollowingCount},
	})
	if err != nil {
		utils.Error(c, err)
		return
	}

	resp := &core.DouyinUserResponse{
		User: services.FromUser(user, counts.Counters, false),
	}

	c.JSON(consts.StatusOK, resp)
}
