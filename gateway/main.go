// Code generated by hertz generator.

package main

import (
	"common/snowy"
	"common/utils"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"gateway/internal/db"
	"gateway/internal/jwt"
	"gateway/internal/services"
	"gateway/internal/videos"
	"os"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/network/standard"
	"github.com/hertz-contrib/logger/zap"
	"github.com/urfave/cli/v2"
)

const (
	cli_base    = "base"
	cli_db      = "db"
	cli_secret  = "secret"
	cli_storage = "storage"
)

func main() {
	app := &cli.App{
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:     cli_db,
				Required: true,
				Usage:    "the db url",
			},
			&cli.StringFlag{
				Name:  cli_secret,
				Usage: "the hmac secret",
			},
			&cli.PathFlag{
				Name:     cli_storage,
				Required: true,
				Usage:    "the video storage path",
			},
			&cli.StringFlag{
				Name:     cli_base,
				Required: true,
				Usage:    "the base url",
			},
		},
		Action: run,
	}

	if err := app.Run(os.Args); err != nil {
		hlog.Fatal(err)
	}
}

func run(ctx *cli.Context) error {
	if err := initialize(ctx); err != nil {
		return err
	}

	h := server.Default(
		server.WithHostPorts(":8000"),
		server.WithStreamBody(true),
		server.WithTransport(standard.NewTransporter),
		server.WithMaxRequestBodySize(1*1024*1024*1024),
	)

	register(h)
	h.Spin()
	return nil
}

// TODO: Read from config files or command line
func initialize(ctx *cli.Context) error {
	hlog.SetLogger(getLogger())

	if ctx.String(cli_secret) == "" {
		secret := make([]byte, 256/8)
		_, err := rand.Read(secret)
		if err != nil {
			return fmt.Errorf("unable to generate secrets")
		} else {
			return fmt.Errorf("generated secret: %s", hex.EncodeToString(secret))
		}
	}

	url := ctx.String(cli_db)
	utils.Env.Rdbms = url
	if err := db.Init(utils.GormDialector()); err != nil {
		return err
	}

	if err := jwt.Init(ctx.String(cli_secret), time.Hour*24*7); err != nil {
		return err
	}

	if err := videos.Init(ctx.Path(cli_storage), ctx.String(cli_base)); err != nil {
		return err
	}

	if err := services.Init(); err != nil {
		return err
	}

	if err := snowy.Init("127.0.0.1:2379"); err != nil {
		return err
	}

	return nil
}

func getLogger() *zap.Logger {
	logger := zap.NewLogger(zap.WithCoreEnc(utils.GetZapEncoder()))
	logger.SetLevel(hlog.LevelTrace)
	return logger
}
