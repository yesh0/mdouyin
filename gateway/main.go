// Code generated by hertz generator.

package main

import (
	"encoding/hex"
	"gateway/internal/db"
	"gateway/internal/jwt"
	"time"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/logger/zap"
	"go.uber.org/zap/zapcore"
	"gorm.io/driver/sqlite"
)

func main() {
	if err := initialize(); err != nil {
		hlog.Fatal(err)
	}

	h := server.Default()

	register(h)
	h.Spin()
}

// TODO: Read from config files or command line
func initialize() error {
	hlog.SetLogger(getLogger())

	if err := db.Init(sqlite.Open("file::memory:?cache=shared")); err != nil {
		return err
	}

	if err := jwt.Init(hex.EncodeToString([]byte("no secret")), time.Hour*24*7); err != nil {
		return err
	}

	return nil
}

func getLogger() *zap.Logger {
	logger := zap.NewLogger(zap.WithCoreEnc(zapcore.NewConsoleEncoder(zapcore.EncoderConfig{
		LevelKey:      "level",
		TimeKey:       "ts",
		MessageKey:    "msg",
		CallerKey:     "caller",
		NameKey:       "logger",
		StacktraceKey: "stacktrace",
		EncodeLevel:   zapcore.CapitalColorLevelEncoder,
		EncodeTime:    zapcore.TimeEncoderOfLayout("15:04:05 Mon"),
	})))
	logger.SetLevel(hlog.LevelTrace)
	return logger
}
